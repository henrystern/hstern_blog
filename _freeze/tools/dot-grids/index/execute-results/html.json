{
  "hash": "a3b45e49ac76b82518bcd12b37cd6a3a",
  "result": {
    "markdown": "---\ntitle: \"Dot Grid Generator\"\ndescription: \"Generate custom notepaper templates.\"\ndate: 2023-12-13\ncategories: [\"Javascript\", \"School\", \"Visualization\"]\nformat:\n  html:\n    page-layout: full\n    code-fold: true\ncomments: false\n---\n\n::: {.column-screen-inset}\n\n::: {.panel-sidebar}\n## Settings\n\n### Paper\n\n\n```{js}\nimport {rasterize, serialize} from \"@mbostock/saving-svg\"\n\nfunction set_paper_size(input, x, y, split) {\n  console.log(input)\n  input.children[0].value = x;\n  input.children[1].value = y;\n  input.children[2].value = split;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\n\nfunction get_paper_dimension(format, orientation) {\n  if (orientation == \"Portrait\") {\n    return {x: format.width, y: format.height}\n  } else {\n    return {x: format.height, y: format.width}\n  }\n}\n\nviewof format = Inputs.select(new Map([\n  [\"A4\", {width: 210, height: 297}],\n  [\"Letter\", {width: 215.9, height: 279.4}]\n  ]), {label: \"Paper Format\", value: \"Letter\"})\n\nviewof orientation = Inputs.radio([[\"Landscape\"], [\"Portrait\"]], {value: \"Landscape\"})\n\nviewof paper = Inputs.form({\n  x: Inputs.range([1, 1000], {value: get_paper_dimension(format, orientation).x, step: .01, label: \"Width (mm)\"}),\n  y: Inputs.range([1, 1000], {value: get_paper_dimension(format, orientation).y, step: .01, label: \"Height (mm)\"}),\n  split: Inputs.range([1, 1000], {value: format.width / 2, step: .01, label: \"Split (mm)\"}),\n  colour: Inputs.color({value: \"#ffffff\", label: \"Colour\"}),\n})\n```\n\n\n### Margins\n\n\n```{ojs}\nviewof margin = Inputs.form({\n  left: Inputs.range([0, 1000], {value: 5, step: 1, label: \"Left (mm)\"}),\n  right: Inputs.range([0, 1000], {value: 5, step: 1, label: \"Right (mm)\"}),\n  top: Inputs.range([0, 1000], {value: 25, step: 1, label: \"Top (mm)\"}),\n  bottom: Inputs.range([0, 1000], {value: 5, step: 1, label: \"Bottom (mm)\"}),\n  centre: Inputs.checkbox([\"Centre Margins\"], {label: \"\"})\n})\n```\n\n\n### Dots\n\n\n```{ojs}\nviewof dots = Inputs.form({\n  dot_colour: Inputs.color({value: \"#c0c0c0\", label: \"Colour\"}),\n  dot_size: Inputs.range([0.1, 10], {value: 0.2, step: .1, label: \"Size (mm)\"}),\n  dot_spacing: Inputs.range([1, 20], {value: 6, step: 1, label: \"Spacing (mm)\"}),\n})\n```\n\n\n## Export\n\n::: {.d-flex .flex-row .justify-content-center .mb-3}\n\n```{ojs}\n//| echo: false\nDOM.download(() => serialize(grid), undefined, \"Save Grid as SVG\")\n```\n\n::: {.p-2}\n:::\n\n```{ojs}\n//| echo: false\nDOM.download(() => rasterize(grid), undefined, \"Save Grid as PNG\")\n```\n\n:::\n\nYou can print the SVG directly by opening it in a browser, selecting the intended paper size and orientation, setting margins to none, and printing at 100% scale.\n\nAlternately, you can open it in a graphics editor like Inkscape for further customization and export to PDF.\n\n:::\n\n\n```{ojs}\n//| panel: fill\n\ngrid = {\n  const s = d3.create(\"svg\")\n    .attr(\"width\", `${paper.x}mm`)\n    .attr(\"height\",`${paper.y}mm`)\n    .style(\"background-color\",paper.colour) \n\n  // Page border\n  s.append(\"rect\")\n    .attr(\"x\",0)\n    .attr(\"y\",0)\n    .attr(\"width\",`${paper.x}mm`)\n    .attr(\"height\",`${paper.y}mm`)\n    .attr(\"stroke\", dots.dot_colour)\n    .attr(\"fill\",paper.colour)\n\n  // Split line\n  s.append(\"line\")\n    .attr(\"x1\",`${paper.split}mm`)\n    .attr(\"x2\",`${paper.split}mm`)\n    .attr(\"y1\",0)\n    .attr(\"y2\",`${paper.y}mm`)\n    .attr(\"stroke\", dots.dot_colour)\n    .attr(\"fill\",paper.colour)\n\n  // Top line\n  s.append(\"line\")\n    .attr(\"x1\",0)\n    .attr(\"x2\",`${paper.x}mm`)\n    .attr(\"y1\",`${margin.top}mm`)\n    .attr(\"y2\",`${margin.top}mm`)\n    .attr(\"stroke\", dots.dot_colour)\n    .attr(\"fill\",paper.colour)\n\n  let remainder = {\n    x: ((paper.x - margin.right - margin.left) % dots.dot_spacing) / 2,\n    y: ((paper.y - margin.bottom - margin.top) % dots.dot_spacing) / 2,\n  }\n\n  // Dots\n  for (let x = remainder.x; margin.left + x < paper.x - margin.right; x += dots.dot_spacing) {\n    for (let y = dots.dot_spacing + remainder.y; margin.top + y < paper.y - margin.bottom; y += dots.dot_spacing) {\n      s.append(\"circle\")\n        .attr(\"cx\", `${margin.left+(x)}mm`)\n        .attr(\"cy\", `${margin.top+(y)}mm`)\n        .attr(\"r\", `${dots.dot_size}mm`)\n        .attr(\"stroke\", dots.dot_colour)\n        .attr(\"fill\", dots.dot_colour)\n    }\n  }\n\n  return s.node();\n}\n```\n\n\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}