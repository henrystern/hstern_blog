{
  "hash": "dc20af462d8352a6f7082f69cefe290f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"An easier way to generate seaborn ridgeplots\"\ndate: 2024-06-01\ncategories: [\"Python\"]\ncode-annotations: hover\n---\n\nWhile their Joy Division inspired t-shirts and posters have given some people the impression that they're not a serious visualization tool, ridgeline plots are an effective way to get a general sense of distributional differences between groups in a dataset.\n\nBut while they're pretty enough to appear on the [seaborn](https://github.com/mwaskom/seaborn/issues/2243) logo; seaborn does not bother to include an api for them. The sole [ridgeline example](https://seaborn.pydata.org/examples/kde_ridgeplot.html) in the seaborn gallery relies on looping through a facetgrid which is hardly more elegant than just doing it in [matplotlib](https://matplotlib.org/matplotblog/posts/create-ridgeplots-in-matplotlib/). \n\nSeaborn has an obvious bias towards the violin plot for distributional comparisons despite the violin plot being [less informative and less attractive](https://www.youtube.com/watch?v=_0QMKFzW9fw) than the ridge plot. Luckily there are enough tools in the violin plot api that we can torture it until it generates the desired output.\n\nHere is the fairly self-explanatory `ridge_plot` function.\n\n::: {#56de37d2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\n\n\ndef ridge_plot(data, x, y, **kwargs):\n    codes, uniques = pd.factorize(data[y])  # <1>\n    uniques = uniques.to_list()\n    uniques = [\"NA\"] + uniques if -1 in codes else uniques\n\n    plot_args = {\n        \"data\": data,\n        \"x\": x,\n        \"y\": codes,\n        \"split\": True,\n        \"orient\": \"h\",\n        \"inner\": None,\n        \"dodge\": False,\n        \"native_scale\": True, # <2>\n        \"width\": 1.75, # <3>\n    }\n    plot_args.update(**kwargs) # <4>\n    ax = sns.violinplot(**plot_args)\n\n    unique_codes = pd.unique(codes)\n    spacing = unique_codes[1] - unique_codes[0]\n    tick_locations = unique_codes + plot_args[\"width\"] * (spacing / 2)\n    ax.set_yticks(tick_locations, labels=uniques) # <5>\n\n    ax.invert_yaxis()  # <6>\n    return ax\n```\n:::\n\n\n1. Factorize the y-axis.\n2. Plot the y-axis as the factor codes at native_scale.\n3. Increase width to create overlap.\n4. Pass all kwargs to the violinplot api.\n5. Add the factor labels at the base of each distribution.\n6. Invert y-axis so the distributions face upwards.\n\n\n\nAnd here are a few examples. \n\n::: {#31fec42c .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\npenguins = sns.load_dataset(\"penguins\")\nridge_plot(\n    penguins, \"flipper_length_mm\", \"species\", inner=\"stick\", color=\"#56ad74\"\n).set(title=\"Flipper length by species\", xlabel=\"\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=607 height=430}\n:::\n:::\n\n\n::: {#457d900a .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\ndiamonds = sns.load_dataset(\"diamonds\")\nridge_plot(diamonds, \"price\", \"cut\", width=4, color=\"#6f83a9\").set(\n    title=\"Diamond price by cut\", xlabel=\"Price\"\n)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=612 height=447}\n:::\n:::\n\n\n::: {#0c3c0d9d .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nmpg = sns.load_dataset(\"mpg\")\n\n# Get common makes and format labels\nmpg[\"make\"] = mpg[\"name\"].str.split(\" \").str[0].str.title()\nmpg = mpg.groupby(\"make\").filter(lambda x: len(x) > 10)\n\n# Sort by horsepower range\nhp_range = mpg.groupby(\"make\")[\"horsepower\"].agg(lambda x: x.max() - x.min()).sort_values()\nmpg[\"make\"] = pd.Categorical(mpg[\"make\"], categories=hp_range.index, ordered=True)\nmpg = mpg.sort_values(\"make\", ascending=False)\n\nridge_plot(\n    mpg,\n    \"horsepower\",\n    \"make\",\n    density_norm=\"width\",\n    color=\"#6ea0b1\",\n).set(title=\"American manufacturers offer a wider range of horsepowers\", xlabel=\"Horsepower\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=626 height=447}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}